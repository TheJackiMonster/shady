if (BUILD_TESTING)
    add_executable(test_math test_math.c)
    target_link_libraries(test_math driver)
    add_test(NAME test_math COMMAND test_math)

    add_executable(test_builder test_builder.c)
    target_link_libraries(test_builder driver)
    add_test(NAME test_builder COMMAND test_builder)

    list(APPEND BASIC_TESTS empty.slim)
    list(APPEND BASIC_TESTS entrypoint_args1.slim)
    list(APPEND BASIC_TESTS basic_blocks1.slim)
    list(APPEND BASIC_TESTS basic_blocks2.slim)
    list(APPEND BASIC_TESTS control_flow1.slim)
    list(APPEND BASIC_TESTS control_flow2.slim)
    list(APPEND BASIC_TESTS functions1.slim)
    list(APPEND BASIC_TESTS identity.slim)
    list(APPEND BASIC_TESTS memory1.slim)
    list(APPEND BASIC_TESTS memory2.slim)
    list(APPEND BASIC_TESTS rec_pow.slim)
    list(APPEND BASIC_TESTS rec_pow2.slim)
    list(APPEND BASIC_TESTS restructure1.slim)
    list(APPEND BASIC_TESTS restructure2.slim)
    list(APPEND BASIC_TESTS simplify_control.slim)
    list(APPEND BASIC_TESTS float.slim)
    list(APPEND BASIC_TESTS constant_in_use.slim)
    list(APPEND BASIC_TESTS arrays.slim)
    list(APPEND BASIC_TESTS fn_decl.slim)
    list(APPEND BASIC_TESTS math.slim)
    list(APPEND BASIC_TESTS comments.slim)
    list(APPEND BASIC_TESTS generic_ptrs1.slim)
    list(APPEND BASIC_TESTS generic_ptrs2.slim)
    list(APPEND BASIC_TESTS subgroup_var.slim)

    list(APPEND BASIC_TESTS reconvergence_heuristics/acyclic1.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/acyclic2.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/acyclic_evil.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/acyclic_simple_with_arg.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/loops1.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/loops2.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/multi_exit_loop.slim)
    list(APPEND BASIC_TESTS reconvergence_heuristics/nested_loops.slim)

    foreach(T IN LISTS BASIC_TESTS)
        add_test(NAME "test/${T}" COMMAND slim ${PROJECT_SOURCE_DIR}/test/${T} -o test.spv)
    endforeach()

    add_subdirectory(opt)

    function(spv_outputting_test)
        cmake_parse_arguments(PARSE_ARGV 0 F "" "NAME;COMPILER" "FILES;ARGS" )
        list(TRANSFORM F_FILES PREPEND ${CMAKE_CURRENT_SOURCE_DIR}/)
        add_test(NAME ${F_NAME} COMMAND ${CMAKE_COMMAND} -DCOMPILER=$<TARGET_FILE:${F_COMPILER}> -DNAME=${F_NAME} "-DFILES=${F_FILES}" "-DTARGS=${F_ARGS}" -DSRC=${PROJECT_SOURCE_DIR} -DDST=${PROJECT_BINARY_DIR} -P ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/test_with_val.cmake)
    endfunction()

    if (TARGET vcc)
        add_subdirectory(vcc)
    endif()
endif()
