// recursive fib!
fn fib varying u32(varying u32 n) {
  if (n <= u32 1) { return (u32 1); }
  return (fib(n - u32 1) + fib(n - u32 2));
}

@Builtin("SubgroupLocalInvocationId")
var input u32 subgroup_local_id;

@Builtin("SubgroupId")
var uniform input u32 subgroup_id;

@EntryPoint("Compute") @Exported @WorkgroupSize(SUBGROUP_SIZE, 1, 1) fn fib_main() {
    val n = subgroup_local_id % u32 16;
    debug_printf("fib(%d) = %d from thread %d:%d\n", n, fib(n), subgroup_id, subgroup_local_id);
    return ();
}
