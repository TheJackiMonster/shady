def should_include_instruction(instruction):
    if (instruction["class"] == "@exclude"):
        return False
    return True

def add_comments(g, indent, comments):
    if indent is None:
        indent = ""
    if type(comments) is str:
        g.g += f"/// {comments}\n"
    elif type(comments) is list:
        for comment in comments:
            g.g += f"/// {comment}\n"

def to_snake_case(camel):
    s = ""
    for (i, c) in zip(range(0, len(camel)), camel):
        if c.isupper():
            if i > 0 and not camel[i - 1].isupper():
                s += "_"
            s += c.lower()
        else:
            s += c
    return s

def capitalize(string):
    assert len(string) > 0
    return string[0].upper() + string[1:]

class Growy:
    g = ""

def generate_header(g, root):
    spv = root["spv"]
    major = spv["major_version"]
    minor = spv["minor_version"]
    revision = spv["revision"]
    g.g += f"/* Generated from SPIR-V {major}.{minor} revision {revision} */\n"
    g.g += f"/* Do not edit this file manually ! */\n"
    g.g += f"/* It is generated by the 'generator' target using Json grammar files. */\n\n"

def starts_with_vowel(string):
    assert len(string) > 0
    vowels = ['a', 'e', 'i', 'o', 'u']
    return string[0] in vowels